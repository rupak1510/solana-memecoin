{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":97569,"databundleVersionId":11856763,"sourceType":"competition"},{"sourceId":11407081,"sourceType":"datasetVersion","datasetId":7012766}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:46:27.989432Z","iopub.execute_input":"2025-04-29T17:46:27.989652Z","iopub.status.idle":"2025-04-29T17:46:29.679018Z","shell.execute_reply.started":"2025-04-29T17:46:27.989628Z","shell.execute_reply":"2025-04-29T17:46:29.678217Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/pump-fun-graduation-february-2025/chunk_40.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_23.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_18.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_21.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_38.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_37.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_36.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_14.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_6.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_35.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_34.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_32.csv\n/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_17.csv\n/kaggle/input/pump-fun-graduation-february-2025/test_unlabeled.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_8.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_7.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_24.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_41.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_9.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_33.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_26.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_11.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_39.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_10.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_31.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_16.csv\n/kaggle/input/pump-fun-graduation-february-2025/dune_token_info_v2.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_4.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_28.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_25.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_22.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_2.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_30.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_19.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_12.csv\n/kaggle/input/pump-fun-graduation-february-2025/dune_token_info.csv\n/kaggle/input/pump-fun-graduation-february-2025/train.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_29.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_15.csv\n/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers_v2.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_1.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_20.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_13.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_27.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_5.csv\n/kaggle/input/pump-fun-graduation-february-2025/chunk_3.csv\n/kaggle/input/solana-skill-sprint-memcoin-graduation/sample_submission.csv\n/kaggle/input/solana-skill-sprint-memcoin-graduation/test_unlabeled.csv\n/kaggle/input/solana-skill-sprint-memcoin-graduation/train.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/test_unlabeled.csv\")\ndune = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/dune_token_info.csv\")\n#dune_v2 = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/dune_token_info_v2.csv\")\ninfo_onchain = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers.csv\")\n#info_onchain_2 = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers_v2.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:46:29.679935Z","iopub.execute_input":"2025-04-29T17:46:29.680348Z","iopub.status.idle":"2025-04-29T17:46:45.858874Z","shell.execute_reply.started":"2025-04-29T17:46:29.680324Z","shell.execute_reply":"2025-04-29T17:46:45.858098Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/1858151755.py:5: DtypeWarning: Columns (1,2) have mixed types. Specify dtype option on import or set low_memory=False.\n  info_onchain = pd.read_csv(\"/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers.csv\")\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import glob\nCHUNK_PATTERN = os.path.join('/kaggle/input/pump-fun-graduation-february-2025', 'chunk*.csv')\nall_chunk_files = glob.glob(CHUNK_PATTERN)\nprint(f\"Found {len(all_chunk_files)} chunk files.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:46:45.861149Z","iopub.execute_input":"2025-04-29T17:46:45.861536Z","iopub.status.idle":"2025-04-29T17:46:45.866592Z","shell.execute_reply.started":"2025-04-29T17:46:45.861515Z","shell.execute_reply":"2025-04-29T17:46:45.865956Z"}},"outputs":[{"name":"stdout","text":"Found 41 chunk files.\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"chunk_list= []\nfor f in all_chunk_files:\n    chunk_list.append(pd.read_csv(f))\nchunk = pd.concat(chunk_list, ignore_index = True)\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:46:45.869560Z","iopub.execute_input":"2025-04-29T17:46:45.869786Z","iopub.status.idle":"2025-04-29T17:48:25.948195Z","shell.execute_reply.started":"2025-04-29T17:46:45.869763Z","shell.execute_reply":"2025-04-29T17:48:25.947598Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"test[\"label\"] = 0\ntrain[\"label\"] = 1\n\ndf = pd.concat([test,train],ignore_index = True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:48:25.949050Z","iopub.execute_input":"2025-04-29T17:48:25.949307Z","iopub.status.idle":"2025-04-29T17:48:25.992861Z","shell.execute_reply.started":"2025-04-29T17:48:25.949284Z","shell.execute_reply":"2025-04-29T17:48:25.992325Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"x = pd.merge(df[['mint','slot_min']],chunk, left_on ='mint' ,right_on ='base_coin',how = 'left')\nx = x[x['slot'] <= x['slot_min'] +100]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:48:25.993543Z","iopub.execute_input":"2025-04-29T17:48:25.993730Z","iopub.status.idle":"2025-04-29T17:48:44.435831Z","shell.execute_reply.started":"2025-04-29T17:48:25.993715Z","shell.execute_reply":"2025-04-29T17:48:44.435281Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"x = pd.merge(x,dune, left_on ='mint',right_on='token_mint_address',how ='left')\nx = x.drop(['token_mint_address'],axis =1) \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:48:44.436648Z","iopub.execute_input":"2025-04-29T17:48:44.436945Z","iopub.status.idle":"2025-04-29T17:48:56.082302Z","shell.execute_reply.started":"2025-04-29T17:48:44.436916Z","shell.execute_reply":"2025-04-29T17:48:56.081574Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"info_onchain = info_onchain[['mint','creator','bundle_size','gas_used']].drop_duplicates(subset = ['mint'], keep = 'first')\nx = pd.merge(x,info_onchain,left_on='mint',right_on ='mint',how='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:48:56.084705Z","iopub.execute_input":"2025-04-29T17:48:56.084897Z","iopub.status.idle":"2025-04-29T17:49:09.949989Z","shell.execute_reply.started":"2025-04-29T17:48:56.084881Z","shell.execute_reply":"2025-04-29T17:49:09.949019Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\nx.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:49:09.951053Z","iopub.execute_input":"2025-04-29T17:49:09.951324Z","iopub.status.idle":"2025-04-29T17:49:09.985295Z","shell.execute_reply.started":"2025-04-29T17:49:09.951298Z","shell.execute_reply":"2025-04-29T17:49:09.984396Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                           mint   slot_min  \\\n0  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump  320921219   \n1  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump  320921219   \n2  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump  320921219   \n3  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump  320921219   \n4  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump  320921219   \n5  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f  320921220   \n6  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f  320921220   \n7  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f  320921220   \n8  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f  320921220   \n9  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f  320921220   \n\n            block_time       slot  tx_idx  \\\n0  2025-02-15 16:04:21  320921219      70   \n1  2025-02-15 16:04:21  320921219     920   \n2  2025-02-15 16:04:21  320921220    1838   \n3  2025-02-15 16:04:21  320921220    1850   \n4  2025-02-15 16:04:35  320921253      97   \n5  2025-02-15 16:04:21  320921220    1942   \n6  2025-02-15 16:04:22  320921222    1007   \n7  2025-02-15 16:04:23  320921224    1724   \n8  2025-02-15 16:04:25  320921230     371   \n9  2025-02-15 16:04:29  320921240    1536   \n\n                                 signing_wallet direction  \\\n0  GA5YVnYGPttYHVVYN4HX9HgSLuaEDAtFAjvjCmT38WHU       buy   \n1   o7RY6P2vQMuGSu1TrLM81weuzgDjaCRTXYRaXJwWcvc       buy   \n2  7mrM9uF3oZU3LqaVtyM4mMTMChoZjMaDDQWS6FKtuExB       buy   \n3  8h8C783QE93nY5TDBqMtu1ysGgynzPEjraRV1avav78V       buy   \n4  7mrM9uF3oZU3LqaVtyM4mMTMChoZjMaDDQWS6FKtuExB      sell   \n5  39tzJf6e7Ms668WPcxrUtobA5imN4B3eyaB7e9QaENw9       buy   \n6  8h8C783QE93nY5TDBqMtu1ysGgynzPEjraRV1avav78V       buy   \n7  FvgzY6NJfGqzHFo4PCscE2f6kMaY9yWogovEK7fG5Tsd       buy   \n8  2RBiAsvw3ugVd7yZNNTYTcueF1w5WeUbMFpWZa7kTd6a       buy   \n9  7JN51kt8kTSDntxDdVNJB8qV8YRpwk6nq5LFV5spXzQ3       buy   \n\n                                      base_coin  base_coin_amount  \\\n0  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump     9570862239841   \n1  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump    41913524659055   \n2  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump     2000000000000   \n3  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump       30988534242   \n4  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump     2000000000000   \n5  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f    68343949044586   \n6  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f       30988534242   \n7  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f     3094633399040   \n8  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f     2154791059941   \n9  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f     1548933983945   \n\n   quote_coin_amount  virtual_token_balance_after  virtual_sol_balance_after  \\\n0          270000000             1063429137760159                30270000000   \n1         1242000000             1021515613101104                31512000000   \n2           61817592             1019515613101104                31573817592   \n3             959727             1019484624566862                31574777319   \n4           61821346             1021484624566862                31512955973   \n5         2040816327             1004656050955414                32040816327   \n6             988327             1004625062421172                32041804654   \n7           99006118             1001530429022132                32140810772   \n8           69300000              999375637962191                32210110772   \n9           50000001              997826703978246                32260110773   \n\n                                           signature  provided_gas_fee  \\\n0  647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...           5593404   \n1  52bMLKPMYJWPyp5iG9FbT2Q2eCJt1wJX6mWSQWCPuz4XnN...          13739910   \n2  33DcGCjWbxuJByZ1Bn7Nxi5wMLpHGnwDbA9tWSaLNgZS9U...                 0   \n3  tezpVR9fACdofqBkhEMBTPRfz5Lj8tw8wiDqAZtPRPLbhY...                 0   \n4  5YZUvqPpnkWQ1WZ1KbCS5nvn5B9RbyiEredY41PXN9Sg2G...                 0   \n5  23XLssXyFyWeVgB2cbksxHv2pYy8AUNfjuJBj7WNuM1XzF...           4136000   \n6  2C9QEoKnHW86o2RQoZ3UXwjs5DAcNwRZDtJ4wNHLfkv1d5...                 0   \n7  92Tght7somJ2jLVqDRwtqHJdF1WcY9m7Hv6H5MM8tfbzBq...           3333333   \n8  5UxeZEFFjJZWCxeVV8ijQ1m64pBhoN6dBy3AQUgokfUWUv...            233333   \n9  4XyJEPtJxAXd3DWvoMr7fdVuKMpcD29MENyUoQbfJbkpAP...           2727272   \n\n   provided_gas_limit      fee  consumed_gas  decimals              name  \\\n0              191285  1079935        191285       6.0  Jail John Karony   \n1               72000   994274         65066       6.0  Jail John Karony   \n2                   0     5000         63386       6.0  Jail John Karony   \n3                   0     5000         64907       6.0  Jail John Karony   \n4                   0     5000         41654       6.0  Jail John Karony   \n5                   0  3318800        193979       NaN               NaN   \n6                   0     5000         57409       NaN               NaN   \n7              300000  1005000         57686       NaN               NaN   \n8              300000    75000         57680       NaN               NaN   \n9              110000   305000         88585       NaN               NaN   \n\n       symbol                                          token_uri  \\\n0  JailKarony  https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...   \n1  JailKarony  https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...   \n2  JailKarony  https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...   \n3  JailKarony  https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...   \n4  JailKarony  https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...   \n5         NaN                                                NaN   \n6         NaN                                                NaN   \n7         NaN                                                NaN   \n8         NaN                                                NaN   \n9         NaN                                                NaN   \n\n                    created_at  \\\n0  2025-02-16 00:04:21.000 UTC   \n1  2025-02-16 00:04:21.000 UTC   \n2  2025-02-16 00:04:21.000 UTC   \n3  2025-02-16 00:04:21.000 UTC   \n4  2025-02-16 00:04:21.000 UTC   \n5                          NaN   \n6                          NaN   \n7                          NaN   \n8                          NaN   \n9                          NaN   \n\n                                             init_tx creator  bundle_size  \\\n0  647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...     NaN          NaN   \n1  647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...     NaN          NaN   \n2  647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...     NaN          NaN   \n3  647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...     NaN          NaN   \n4  647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...     NaN          NaN   \n5                                                NaN     NaN          NaN   \n6                                                NaN     NaN          NaN   \n7                                                NaN     NaN          NaN   \n8                                                NaN     NaN          NaN   \n9                                                NaN     NaN          NaN   \n\n   gas_used  \n0       NaN  \n1       NaN  \n2       NaN  \n3       NaN  \n4       NaN  \n5       NaN  \n6       NaN  \n7       NaN  \n8       NaN  \n9       NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mint</th>\n      <th>slot_min</th>\n      <th>block_time</th>\n      <th>slot</th>\n      <th>tx_idx</th>\n      <th>signing_wallet</th>\n      <th>direction</th>\n      <th>base_coin</th>\n      <th>base_coin_amount</th>\n      <th>quote_coin_amount</th>\n      <th>virtual_token_balance_after</th>\n      <th>virtual_sol_balance_after</th>\n      <th>signature</th>\n      <th>provided_gas_fee</th>\n      <th>provided_gas_limit</th>\n      <th>fee</th>\n      <th>consumed_gas</th>\n      <th>decimals</th>\n      <th>name</th>\n      <th>symbol</th>\n      <th>token_uri</th>\n      <th>created_at</th>\n      <th>init_tx</th>\n      <th>creator</th>\n      <th>bundle_size</th>\n      <th>gas_used</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>320921219</td>\n      <td>2025-02-15 16:04:21</td>\n      <td>320921219</td>\n      <td>70</td>\n      <td>GA5YVnYGPttYHVVYN4HX9HgSLuaEDAtFAjvjCmT38WHU</td>\n      <td>buy</td>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>9570862239841</td>\n      <td>270000000</td>\n      <td>1063429137760159</td>\n      <td>30270000000</td>\n      <td>647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...</td>\n      <td>5593404</td>\n      <td>191285</td>\n      <td>1079935</td>\n      <td>191285</td>\n      <td>6.0</td>\n      <td>Jail John Karony</td>\n      <td>JailKarony</td>\n      <td>https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...</td>\n      <td>2025-02-16 00:04:21.000 UTC</td>\n      <td>647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>320921219</td>\n      <td>2025-02-15 16:04:21</td>\n      <td>320921219</td>\n      <td>920</td>\n      <td>o7RY6P2vQMuGSu1TrLM81weuzgDjaCRTXYRaXJwWcvc</td>\n      <td>buy</td>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>41913524659055</td>\n      <td>1242000000</td>\n      <td>1021515613101104</td>\n      <td>31512000000</td>\n      <td>52bMLKPMYJWPyp5iG9FbT2Q2eCJt1wJX6mWSQWCPuz4XnN...</td>\n      <td>13739910</td>\n      <td>72000</td>\n      <td>994274</td>\n      <td>65066</td>\n      <td>6.0</td>\n      <td>Jail John Karony</td>\n      <td>JailKarony</td>\n      <td>https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...</td>\n      <td>2025-02-16 00:04:21.000 UTC</td>\n      <td>647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>320921219</td>\n      <td>2025-02-15 16:04:21</td>\n      <td>320921220</td>\n      <td>1838</td>\n      <td>7mrM9uF3oZU3LqaVtyM4mMTMChoZjMaDDQWS6FKtuExB</td>\n      <td>buy</td>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>2000000000000</td>\n      <td>61817592</td>\n      <td>1019515613101104</td>\n      <td>31573817592</td>\n      <td>33DcGCjWbxuJByZ1Bn7Nxi5wMLpHGnwDbA9tWSaLNgZS9U...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5000</td>\n      <td>63386</td>\n      <td>6.0</td>\n      <td>Jail John Karony</td>\n      <td>JailKarony</td>\n      <td>https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...</td>\n      <td>2025-02-16 00:04:21.000 UTC</td>\n      <td>647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>320921219</td>\n      <td>2025-02-15 16:04:21</td>\n      <td>320921220</td>\n      <td>1850</td>\n      <td>8h8C783QE93nY5TDBqMtu1ysGgynzPEjraRV1avav78V</td>\n      <td>buy</td>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>30988534242</td>\n      <td>959727</td>\n      <td>1019484624566862</td>\n      <td>31574777319</td>\n      <td>tezpVR9fACdofqBkhEMBTPRfz5Lj8tw8wiDqAZtPRPLbhY...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5000</td>\n      <td>64907</td>\n      <td>6.0</td>\n      <td>Jail John Karony</td>\n      <td>JailKarony</td>\n      <td>https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...</td>\n      <td>2025-02-16 00:04:21.000 UTC</td>\n      <td>647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>320921219</td>\n      <td>2025-02-15 16:04:35</td>\n      <td>320921253</td>\n      <td>97</td>\n      <td>7mrM9uF3oZU3LqaVtyM4mMTMChoZjMaDDQWS6FKtuExB</td>\n      <td>sell</td>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>2000000000000</td>\n      <td>61821346</td>\n      <td>1021484624566862</td>\n      <td>31512955973</td>\n      <td>5YZUvqPpnkWQ1WZ1KbCS5nvn5B9RbyiEredY41PXN9Sg2G...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5000</td>\n      <td>41654</td>\n      <td>6.0</td>\n      <td>Jail John Karony</td>\n      <td>JailKarony</td>\n      <td>https://ipfs.io/ipfs/QmXEmm22xfcRcdksZPQmUaXCj...</td>\n      <td>2025-02-16 00:04:21.000 UTC</td>\n      <td>647oZ9PzFUjtPXtyuVKkn8QhzUrgLb7JRRPBbY3zW88HbD...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>320921220</td>\n      <td>2025-02-15 16:04:21</td>\n      <td>320921220</td>\n      <td>1942</td>\n      <td>39tzJf6e7Ms668WPcxrUtobA5imN4B3eyaB7e9QaENw9</td>\n      <td>buy</td>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>68343949044586</td>\n      <td>2040816327</td>\n      <td>1004656050955414</td>\n      <td>32040816327</td>\n      <td>23XLssXyFyWeVgB2cbksxHv2pYy8AUNfjuJBj7WNuM1XzF...</td>\n      <td>4136000</td>\n      <td>0</td>\n      <td>3318800</td>\n      <td>193979</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>320921220</td>\n      <td>2025-02-15 16:04:22</td>\n      <td>320921222</td>\n      <td>1007</td>\n      <td>8h8C783QE93nY5TDBqMtu1ysGgynzPEjraRV1avav78V</td>\n      <td>buy</td>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>30988534242</td>\n      <td>988327</td>\n      <td>1004625062421172</td>\n      <td>32041804654</td>\n      <td>2C9QEoKnHW86o2RQoZ3UXwjs5DAcNwRZDtJ4wNHLfkv1d5...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5000</td>\n      <td>57409</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>320921220</td>\n      <td>2025-02-15 16:04:23</td>\n      <td>320921224</td>\n      <td>1724</td>\n      <td>FvgzY6NJfGqzHFo4PCscE2f6kMaY9yWogovEK7fG5Tsd</td>\n      <td>buy</td>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>3094633399040</td>\n      <td>99006118</td>\n      <td>1001530429022132</td>\n      <td>32140810772</td>\n      <td>92Tght7somJ2jLVqDRwtqHJdF1WcY9m7Hv6H5MM8tfbzBq...</td>\n      <td>3333333</td>\n      <td>300000</td>\n      <td>1005000</td>\n      <td>57686</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>320921220</td>\n      <td>2025-02-15 16:04:25</td>\n      <td>320921230</td>\n      <td>371</td>\n      <td>2RBiAsvw3ugVd7yZNNTYTcueF1w5WeUbMFpWZa7kTd6a</td>\n      <td>buy</td>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>2154791059941</td>\n      <td>69300000</td>\n      <td>999375637962191</td>\n      <td>32210110772</td>\n      <td>5UxeZEFFjJZWCxeVV8ijQ1m64pBhoN6dBy3AQUgokfUWUv...</td>\n      <td>233333</td>\n      <td>300000</td>\n      <td>75000</td>\n      <td>57680</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>320921220</td>\n      <td>2025-02-15 16:04:29</td>\n      <td>320921240</td>\n      <td>1536</td>\n      <td>7JN51kt8kTSDntxDdVNJB8qV8YRpwk6nq5LFV5spXzQ3</td>\n      <td>buy</td>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>1548933983945</td>\n      <td>50000001</td>\n      <td>997826703978246</td>\n      <td>32260110773</td>\n      <td>4XyJEPtJxAXd3DWvoMr7fdVuKMpcD29MENyUoQbfJbkpAP...</td>\n      <td>2727272</td>\n      <td>110000</td>\n      <td>305000</td>\n      <td>88585</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"x['block_time'] = pd.to_datetime(x['block_time'])\nx['created_at'] = pd.to_datetime(x['created_at'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:49:09.986186Z","iopub.execute_input":"2025-04-29T17:49:09.986446Z","iopub.status.idle":"2025-04-29T17:49:23.958271Z","shell.execute_reply.started":"2025-04-29T17:49:09.986417Z","shell.execute_reply":"2025-04-29T17:49:23.957712Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"x = x.drop(['gas_used','token_uri','init_tx','signature','base_coin'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:49:23.958853Z","iopub.execute_input":"2025-04-29T17:49:23.959061Z","iopub.status.idle":"2025-04-29T17:49:25.718661Z","shell.execute_reply.started":"2025-04-29T17:49:23.959045Z","shell.execute_reply":"2025-04-29T17:49:25.717998Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"agg_fu ={\n    'slot_min' : ['first'],\n    'block_time' : ['max','min'],\n    'slot' : ['max','min','count'],\n    'tx_idx': ['max','min','count'],\n    'signing_wallet' : ['nunique'],\n    'base_coin_amount': ['max','std','sum','mean'],\n    'quote_coin_amount': ['max','std','sum','mean'],\n    'virtual_token_balance_after': ['max','min','std','mean'],\n    'virtual_sol_balance_after': ['max','min','std','mean'],\n    'decimals': ['first'],\n    'name': ['first'],\n    'symbol': ['first'],\n    'created_at': ['first'],\n    'creator': ['first'],\n    'bundle_size': ['first']\n}\ngrouped_x = x.groupby('mint')\ngroup_x = grouped_x.agg(agg_fu)\ngroup_x.columns = ['_'.join(col).strip() for col in group_x.columns.values]\ngroup_x = group_x.reset_index()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:49:25.719349Z","iopub.execute_input":"2025-04-29T17:49:25.719539Z","iopub.status.idle":"2025-04-29T17:49:44.779469Z","shell.execute_reply.started":"2025-04-29T17:49:25.719522Z","shell.execute_reply":"2025-04-29T17:49:44.778907Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"group_x.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:49:44.780138Z","iopub.execute_input":"2025-04-29T17:49:44.780316Z","iopub.status.idle":"2025-04-29T17:49:45.243723Z","shell.execute_reply.started":"2025-04-29T17:49:44.780303Z","shell.execute_reply":"2025-04-29T17:49:45.242952Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1118389 entries, 0 to 1118388\nData columns (total 33 columns):\n #   Column                            Non-Null Count    Dtype              \n---  ------                            --------------    -----              \n 0   mint                              1118389 non-null  object             \n 1   slot_min_first                    1118389 non-null  int64              \n 2   block_time_max                    1118389 non-null  datetime64[ns]     \n 3   block_time_min                    1118389 non-null  datetime64[ns]     \n 4   slot_max                          1118389 non-null  int64              \n 5   slot_min                          1118389 non-null  int64              \n 6   slot_count                        1118389 non-null  int64              \n 7   tx_idx_max                        1118389 non-null  int64              \n 8   tx_idx_min                        1118389 non-null  int64              \n 9   tx_idx_count                      1118389 non-null  int64              \n 10  signing_wallet_nunique            1118389 non-null  int64              \n 11  base_coin_amount_max              1118389 non-null  int64              \n 12  base_coin_amount_std              1046401 non-null  float64            \n 13  base_coin_amount_sum              1118389 non-null  int64              \n 14  base_coin_amount_mean             1118389 non-null  float64            \n 15  quote_coin_amount_max             1118389 non-null  int64              \n 16  quote_coin_amount_std             1046401 non-null  float64            \n 17  quote_coin_amount_sum             1118389 non-null  int64              \n 18  quote_coin_amount_mean            1118389 non-null  float64            \n 19  virtual_token_balance_after_max   1118389 non-null  int64              \n 20  virtual_token_balance_after_min   1118389 non-null  int64              \n 21  virtual_token_balance_after_std   1046401 non-null  float64            \n 22  virtual_token_balance_after_mean  1118389 non-null  float64            \n 23  virtual_sol_balance_after_max     1118389 non-null  int64              \n 24  virtual_sol_balance_after_min     1118389 non-null  int64              \n 25  virtual_sol_balance_after_std     1046401 non-null  float64            \n 26  virtual_sol_balance_after_mean    1118389 non-null  float64            \n 27  decimals_first                    885673 non-null   float64            \n 28  name_first                        885426 non-null   object             \n 29  symbol_first                      885231 non-null   object             \n 30  created_at_first                  885673 non-null   datetime64[ns, UTC]\n 31  creator_first                     495052 non-null   object             \n 32  bundle_size_first                 495052 non-null   float64            \ndtypes: datetime64[ns, UTC](1), datetime64[ns](2), float64(10), int64(16), object(4)\nmemory usage: 281.6+ MB\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"buy_d = x[x['direction'] == 'buy']\nsell_d = x[x['direction'] == 'sell']\n\nbuyed_d  = buy_d.groupby('mint')\nselled_d = sell_d.groupby('mint')\n\nagg_buy  = buyed_d.agg({\n   # 'provided_gas_fee' : [sum],\n   #'provided_gas_limit': [sum],\n    #'fee':['sum'],\n    'signing_wallet' :['nunique'],\n    'base_coin_amount':['sum','mean','max'],\n    'quote_coin_amount' : ['sum','mean','max']\n    \n})\n\nagg_sell = selled_d.agg({\n    #'provided_gas_fee' : [sum],\n    #'provided_gas_limit': [sum],\n    #'fee':['sum'],\n    'signing_wallet' :['nunique'],\n    'base_coin_amount':['sum','mean','max'],\n    'quote_coin_amount' : ['sum','mean','max']\n    \n})\nagg_buy.columns = ['buy'+'_'.join(col).strip() for col in agg_buy.columns.values]\nagg_sell.columns = ['sell'+'_'.join(col).strip() for col in agg_sell.columns.values]\nagg_buy.reset_index(inplace =True)\nagg_sell.reset_index(inplace = True)\n    \n    \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:49:45.244542Z","iopub.execute_input":"2025-04-29T17:49:45.244801Z","iopub.status.idle":"2025-04-29T17:50:01.978371Z","shell.execute_reply.started":"2025-04-29T17:49:45.244775Z","shell.execute_reply":"2025-04-29T17:50:01.977762Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"group_x = pd.merge(group_x,agg_buy,on ='mint',how='left')\ngroup_x = pd.merge(group_x,agg_sell,on ='mint',how='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:01.979035Z","iopub.execute_input":"2025-04-29T17:50:01.979204Z","iopub.status.idle":"2025-04-29T17:50:04.415832Z","shell.execute_reply.started":"2025-04-29T17:50:01.979189Z","shell.execute_reply":"2025-04-29T17:50:04.415026Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"group_x['time'] = (group_x['block_time_max'] - group_x['block_time_min']).dt.total_seconds()\ngroup_x.drop(['created_at_first'],axis =1,inplace =True)\ngroup_x['sol_time'] =   group_x['slot_max'] - group_x['slot_min_first']\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:04.416726Z","iopub.execute_input":"2025-04-29T17:50:04.417000Z","iopub.status.idle":"2025-04-29T17:50:04.742753Z","shell.execute_reply.started":"2025-04-29T17:50:04.416953Z","shell.execute_reply":"2025-04-29T17:50:04.741993Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"group_x = group_x.drop(['block_time_max','block_time_min'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:04.743807Z","iopub.execute_input":"2025-04-29T17:50:04.744103Z","iopub.status.idle":"2025-04-29T17:50:05.059684Z","shell.execute_reply.started":"2025-04-29T17:50:04.744082Z","shell.execute_reply":"2025-04-29T17:50:05.059169Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"group_x['slot_diff'] =  (group_x['slot_max'] - group_x['slot_min'])\ngroup_x = group_x.drop(['slot_max','slot_min'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:05.060357Z","iopub.execute_input":"2025-04-29T17:50:05.060557Z","iopub.status.idle":"2025-04-29T17:50:05.359805Z","shell.execute_reply.started":"2025-04-29T17:50:05.060541Z","shell.execute_reply":"2025-04-29T17:50:05.359261Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"creator_trades = x.groupby(['mint', 'signing_wallet']).size().reset_index(name='trade_count')\n# Need onchain_info_df merged *before* this step if not already done\n\ncreator_trades = pd.merge(creator_trades, info_onchain[['mint', 'creator']], left_on='mint', right_on='mint', how='inner')\ncreator_trades = creator_trades[creator_trades['signing_wallet'] == creator_trades['creator']]\ncreator_trades = creator_trades[['mint', 'trade_count']].rename(columns={'trade_count': 'creator_trade_count'})\ncreator_trades = creator_trades.drop_duplicates(subset=['mint'], keep='first')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:05.360807Z","iopub.execute_input":"2025-04-29T17:50:05.361066Z","iopub.status.idle":"2025-04-29T17:50:27.841528Z","shell.execute_reply.started":"2025-04-29T17:50:05.361039Z","shell.execute_reply":"2025-04-29T17:50:27.840933Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"group_x = pd.merge(group_x,creator_trades,on ='mint',how ='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:27.842203Z","iopub.execute_input":"2025-04-29T17:50:27.842380Z","iopub.status.idle":"2025-04-29T17:50:28.883740Z","shell.execute_reply.started":"2025-04-29T17:50:27.842365Z","shell.execute_reply":"2025-04-29T17:50:28.883189Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"group_x['creator_trade_count'] = group_x['creator_trade_count'].fillna(0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:28.884437Z","iopub.execute_input":"2025-04-29T17:50:28.884666Z","iopub.status.idle":"2025-04-29T17:50:28.902193Z","shell.execute_reply.started":"2025-04-29T17:50:28.884645Z","shell.execute_reply":"2025-04-29T17:50:28.901681Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"group_x['bs_walun_r'] = group_x['buysigning_wallet_nunique'] / (group_x['sellsigning_wallet_nunique']+1e-6)\n\ngroup_x['bs_basesum_r'] = group_x['buybase_coin_amount_sum'] / (group_x['sellbase_coin_amount_sum']+1e-6)\n\ngroup_x['bs_quotesum_r'] = group_x['buyquote_coin_amount_sum'] / (group_x['sellquote_coin_amount_sum']+1e-6)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:28.902827Z","iopub.execute_input":"2025-04-29T17:50:28.903079Z","iopub.status.idle":"2025-04-29T17:50:28.920797Z","shell.execute_reply.started":"2025-04-29T17:50:28.903061Z","shell.execute_reply":"2025-04-29T17:50:28.920101Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"group_x = group_x.drop(['buysigning_wallet_nunique','sellsigning_wallet_nunique','buybase_coin_amount_sum','sellbase_coin_amount_sum','buyquote_coin_amount_sum','sellquote_coin_amount_sum'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:28.921505Z","iopub.execute_input":"2025-04-29T17:50:28.921736Z","iopub.status.idle":"2025-04-29T17:50:29.211987Z","shell.execute_reply.started":"2025-04-29T17:50:28.921710Z","shell.execute_reply":"2025-04-29T17:50:29.211401Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"for col in ['base_coin_amount_sum','base_coin_amount_max','base_coin_amount_mean', 'quote_coin_amount_sum','quote_coin_amount_max','quote_coin_amount_mean', 'virtual_token_balance_after_mean','buybase_coin_amount_mean','buyquote_coin_amount_mean','sellquote_coin_amount_mean','sellbase_coin_amount_mean','virtual_sol_balance_after_mean']:\n    group_x[col] = np.log1p(group_x[col])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:29.212800Z","iopub.execute_input":"2025-04-29T17:50:29.213138Z","iopub.status.idle":"2025-04-29T17:50:29.293632Z","shell.execute_reply.started":"2025-04-29T17:50:29.213111Z","shell.execute_reply":"2025-04-29T17:50:29.292735Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/core/arraylike.py:399: RuntimeWarning: invalid value encountered in log1p\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"group_x = group_x.drop(['name_first','symbol_first','slot_count','decimals_first','creator_first','bundle_size_first'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:29.294547Z","iopub.execute_input":"2025-04-29T17:50:29.294837Z","iopub.status.idle":"2025-04-29T17:50:29.583937Z","shell.execute_reply.started":"2025-04-29T17:50:29.294808Z","shell.execute_reply":"2025-04-29T17:50:29.583405Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"nul_col = ['base_coin_amount_std','quote_coin_amount_std','virtual_token_balance_after_std',\n           'virtual_sol_balance_after_std','buybase_coin_amount_mean','buybase_coin_amount_max',\n           'buyquote_coin_amount_mean','buyquote_coin_amount_max','sellbase_coin_amount_mean',\n           'sellbase_coin_amount_max','sellquote_coin_amount_mean', 'sellquote_coin_amount_max',\n           'bs_walun_r', 'bs_basesum_r' ,'bs_quotesum_r'\n          ]\nfor cols in nul_col:\n    group_x[cols] = group_x[cols].fillna(0) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:29.587976Z","iopub.execute_input":"2025-04-29T17:50:29.588182Z","iopub.status.idle":"2025-04-29T17:50:29.714499Z","shell.execute_reply.started":"2025-04-29T17:50:29.588165Z","shell.execute_reply":"2025-04-29T17:50:29.713721Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"df = pd.merge(df,group_x,on ='mint',how ='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:29.715294Z","iopub.execute_input":"2025-04-29T17:50:29.715500Z","iopub.status.idle":"2025-04-29T17:50:31.608350Z","shell.execute_reply.started":"2025-04-29T17:50:29.715483Z","shell.execute_reply":"2025-04-29T17:50:31.607753Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:31.609064Z","iopub.execute_input":"2025-04-29T17:50:31.609237Z","iopub.status.idle":"2025-04-29T17:50:31.639664Z","shell.execute_reply.started":"2025-04-29T17:50:31.609223Z","shell.execute_reply":"2025-04-29T17:50:31.638896Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                          mint   slot_min  \\\n0           0  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump  320921219   \n1           1  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f  320921220   \n2           2  HL2di8dcQ7eYDmkcFoZ4zJyHX5SbRZXAJxTegL3JPfx2  320921222   \n3           3  7iAFj9Pc5QH9jbGmHwYe8T6yzNVbjhL13PNJXVTspump  320921224   \n4           4  F7U1Rdgz2KFpneKpAnYytWF2jggnsrLScfi2A668pump  320921228   \n\n   is_valid  label  slot_graduated has_graduated  slot_min_first  tx_idx_max  \\\n0      True      0             NaN           NaN       320921219        1850   \n1      True      0             NaN           NaN       320921220        1942   \n2      True      0             NaN           NaN       320921222        2150   \n3      True      0             NaN           NaN       320921224        2023   \n4      True      0             NaN           NaN       320921228        2102   \n\n   tx_idx_min  tx_idx_count  signing_wallet_nunique  base_coin_amount_max  \\\n0          70             5                       4             31.366630   \n1          34            13                       8             31.855574   \n2          21            23                      14             32.180473   \n3         301             4                       3             31.243917   \n4          33             9                       6             31.175248   \n\n   base_coin_amount_std  base_coin_amount_sum  base_coin_amount_mean  \\\n0          1.760649e+13             31.647681              30.038243   \n1          2.473526e+13             32.741321              30.176372   \n2          2.876837e+13             33.776735              30.641241   \n3          6.987345e+12             32.456870              31.070576   \n4          1.181145e+13             31.677870              29.480646   \n\n   quote_coin_amount_max  quote_coin_amount_std  quote_coin_amount_sum  \\\n0              20.939989           5.213965e+08              21.215886   \n1              21.443706           7.397089e+08              22.337180   \n2              21.801877           9.464918e+08              23.483959   \n3              20.834628           2.456629e+08              22.076302   \n4              20.723266           3.434046e+08              21.245790   \n\n   quote_coin_amount_mean  virtual_token_balance_after_max  \\\n0               19.606448                 1063429137760159   \n1               19.772231                 1070705267358516   \n2               20.348465                 1063744511536750   \n3               20.690008                 1051960784313726   \n4               19.048565                 1038387096774194   \n\n   virtual_token_balance_after_min  virtual_token_balance_after_std  \\\n0                 1019484624566862                     1.922447e+13   \n1                  991799693730742                     3.056919e+13   \n2                  895693730929968                     4.377995e+13   \n3                  981597641252263                     2.874639e+13   \n4                 1018845643270251                     9.588242e+12   \n\n   virtual_token_balance_after_mean  virtual_sol_balance_after_max  \\\n0                         34.567447                    31574777319   \n1                         34.554897                    32456150376   \n2                         34.505554                    35938623761   \n3                         34.554486                    32793477335   \n4                         34.568263                    31594579821   \n\n   virtual_sol_balance_after_min  virtual_sol_balance_after_std  \\\n0                    30270000000                   5.703147e+08   \n1                    30064295925                   9.207849e+08   \n2                    30261025706                   1.497481e+09   \n3                    30600000000                   8.955659e+08   \n4                    31000000000                   2.915966e+08   \n\n   virtual_sol_balance_after_mean  buybase_coin_amount_mean  \\\n0                       24.166523                 30.224696   \n1                       24.179608                 29.982485   \n2                       24.230087                 30.570668   \n3                       24.179812                 31.047680   \n4                       24.165513                 29.831418   \n\n   buybase_coin_amount_max  buyquote_coin_amount_mean  \\\n0             4.191352e+13                  19.791085   \n1             6.834395e+13                  19.577312   \n2             9.458055e+13                  20.287160   \n3             3.707324e+13                  20.651941   \n4             3.461290e+13                  19.398439   \n\n   buyquote_coin_amount_max  sellbase_coin_amount_mean  \\\n0              1.242000e+09                  28.324168   \n1              2.040816e+09                  30.424792   \n2              2.940594e+09                  30.761477   \n3              1.117800e+09                  31.136275   \n4              1.000000e+09                  27.646020   \n\n   sellbase_coin_amount_max  sellquote_coin_amount_mean  \\\n0              2.000000e+12                   17.939759   \n1              6.834395e+13                   20.021711   \n2              8.326319e+13                   20.454170   \n3              3.328990e+13                   20.796216   \n4              2.000000e+12                   17.229792   \n\n   sellquote_coin_amount_max  time  sol_time  slot_diff  creator_trade_count  \\\n0               6.182135e+07  14.0        34         34                  0.0   \n1               2.055337e+09  37.0        91         91                  0.0   \n2               2.577351e+09  39.0        98         98                  0.0   \n3               1.075677e+09   6.0        15         15                  0.0   \n4               5.982678e+07  24.0        60         60                  0.0   \n\n   bs_walun_r  bs_basesum_r  bs_quotesum_r  \n0    3.999996     26.757688      25.473035  \n1    1.600000      1.028083       1.025936  \n2    1.625000      1.549294       1.586609  \n3    2.999997      2.745648       2.596947  \n4    1.999999     17.788372      17.492884  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>mint</th>\n      <th>slot_min</th>\n      <th>is_valid</th>\n      <th>label</th>\n      <th>slot_graduated</th>\n      <th>has_graduated</th>\n      <th>slot_min_first</th>\n      <th>tx_idx_max</th>\n      <th>tx_idx_min</th>\n      <th>tx_idx_count</th>\n      <th>signing_wallet_nunique</th>\n      <th>base_coin_amount_max</th>\n      <th>base_coin_amount_std</th>\n      <th>base_coin_amount_sum</th>\n      <th>base_coin_amount_mean</th>\n      <th>quote_coin_amount_max</th>\n      <th>quote_coin_amount_std</th>\n      <th>quote_coin_amount_sum</th>\n      <th>quote_coin_amount_mean</th>\n      <th>virtual_token_balance_after_max</th>\n      <th>virtual_token_balance_after_min</th>\n      <th>virtual_token_balance_after_std</th>\n      <th>virtual_token_balance_after_mean</th>\n      <th>virtual_sol_balance_after_max</th>\n      <th>virtual_sol_balance_after_min</th>\n      <th>virtual_sol_balance_after_std</th>\n      <th>virtual_sol_balance_after_mean</th>\n      <th>buybase_coin_amount_mean</th>\n      <th>buybase_coin_amount_max</th>\n      <th>buyquote_coin_amount_mean</th>\n      <th>buyquote_coin_amount_max</th>\n      <th>sellbase_coin_amount_mean</th>\n      <th>sellbase_coin_amount_max</th>\n      <th>sellquote_coin_amount_mean</th>\n      <th>sellquote_coin_amount_max</th>\n      <th>time</th>\n      <th>sol_time</th>\n      <th>slot_diff</th>\n      <th>creator_trade_count</th>\n      <th>bs_walun_r</th>\n      <th>bs_basesum_r</th>\n      <th>bs_quotesum_r</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>320921219</td>\n      <td>True</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>320921219</td>\n      <td>1850</td>\n      <td>70</td>\n      <td>5</td>\n      <td>4</td>\n      <td>31.366630</td>\n      <td>1.760649e+13</td>\n      <td>31.647681</td>\n      <td>30.038243</td>\n      <td>20.939989</td>\n      <td>5.213965e+08</td>\n      <td>21.215886</td>\n      <td>19.606448</td>\n      <td>1063429137760159</td>\n      <td>1019484624566862</td>\n      <td>1.922447e+13</td>\n      <td>34.567447</td>\n      <td>31574777319</td>\n      <td>30270000000</td>\n      <td>5.703147e+08</td>\n      <td>24.166523</td>\n      <td>30.224696</td>\n      <td>4.191352e+13</td>\n      <td>19.791085</td>\n      <td>1.242000e+09</td>\n      <td>28.324168</td>\n      <td>2.000000e+12</td>\n      <td>17.939759</td>\n      <td>6.182135e+07</td>\n      <td>14.0</td>\n      <td>34</td>\n      <td>34</td>\n      <td>0.0</td>\n      <td>3.999996</td>\n      <td>26.757688</td>\n      <td>25.473035</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>320921220</td>\n      <td>True</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>320921220</td>\n      <td>1942</td>\n      <td>34</td>\n      <td>13</td>\n      <td>8</td>\n      <td>31.855574</td>\n      <td>2.473526e+13</td>\n      <td>32.741321</td>\n      <td>30.176372</td>\n      <td>21.443706</td>\n      <td>7.397089e+08</td>\n      <td>22.337180</td>\n      <td>19.772231</td>\n      <td>1070705267358516</td>\n      <td>991799693730742</td>\n      <td>3.056919e+13</td>\n      <td>34.554897</td>\n      <td>32456150376</td>\n      <td>30064295925</td>\n      <td>9.207849e+08</td>\n      <td>24.179608</td>\n      <td>29.982485</td>\n      <td>6.834395e+13</td>\n      <td>19.577312</td>\n      <td>2.040816e+09</td>\n      <td>30.424792</td>\n      <td>6.834395e+13</td>\n      <td>20.021711</td>\n      <td>2.055337e+09</td>\n      <td>37.0</td>\n      <td>91</td>\n      <td>91</td>\n      <td>0.0</td>\n      <td>1.600000</td>\n      <td>1.028083</td>\n      <td>1.025936</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>HL2di8dcQ7eYDmkcFoZ4zJyHX5SbRZXAJxTegL3JPfx2</td>\n      <td>320921222</td>\n      <td>True</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>320921222</td>\n      <td>2150</td>\n      <td>21</td>\n      <td>23</td>\n      <td>14</td>\n      <td>32.180473</td>\n      <td>2.876837e+13</td>\n      <td>33.776735</td>\n      <td>30.641241</td>\n      <td>21.801877</td>\n      <td>9.464918e+08</td>\n      <td>23.483959</td>\n      <td>20.348465</td>\n      <td>1063744511536750</td>\n      <td>895693730929968</td>\n      <td>4.377995e+13</td>\n      <td>34.505554</td>\n      <td>35938623761</td>\n      <td>30261025706</td>\n      <td>1.497481e+09</td>\n      <td>24.230087</td>\n      <td>30.570668</td>\n      <td>9.458055e+13</td>\n      <td>20.287160</td>\n      <td>2.940594e+09</td>\n      <td>30.761477</td>\n      <td>8.326319e+13</td>\n      <td>20.454170</td>\n      <td>2.577351e+09</td>\n      <td>39.0</td>\n      <td>98</td>\n      <td>98</td>\n      <td>0.0</td>\n      <td>1.625000</td>\n      <td>1.549294</td>\n      <td>1.586609</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>7iAFj9Pc5QH9jbGmHwYe8T6yzNVbjhL13PNJXVTspump</td>\n      <td>320921224</td>\n      <td>True</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>320921224</td>\n      <td>2023</td>\n      <td>301</td>\n      <td>4</td>\n      <td>3</td>\n      <td>31.243917</td>\n      <td>6.987345e+12</td>\n      <td>32.456870</td>\n      <td>31.070576</td>\n      <td>20.834628</td>\n      <td>2.456629e+08</td>\n      <td>22.076302</td>\n      <td>20.690008</td>\n      <td>1051960784313726</td>\n      <td>981597641252263</td>\n      <td>2.874639e+13</td>\n      <td>34.554486</td>\n      <td>32793477335</td>\n      <td>30600000000</td>\n      <td>8.955659e+08</td>\n      <td>24.179812</td>\n      <td>31.047680</td>\n      <td>3.707324e+13</td>\n      <td>20.651941</td>\n      <td>1.117800e+09</td>\n      <td>31.136275</td>\n      <td>3.328990e+13</td>\n      <td>20.796216</td>\n      <td>1.075677e+09</td>\n      <td>6.0</td>\n      <td>15</td>\n      <td>15</td>\n      <td>0.0</td>\n      <td>2.999997</td>\n      <td>2.745648</td>\n      <td>2.596947</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>F7U1Rdgz2KFpneKpAnYytWF2jggnsrLScfi2A668pump</td>\n      <td>320921228</td>\n      <td>True</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>320921228</td>\n      <td>2102</td>\n      <td>33</td>\n      <td>9</td>\n      <td>6</td>\n      <td>31.175248</td>\n      <td>1.181145e+13</td>\n      <td>31.677870</td>\n      <td>29.480646</td>\n      <td>20.723266</td>\n      <td>3.434046e+08</td>\n      <td>21.245790</td>\n      <td>19.048565</td>\n      <td>1038387096774194</td>\n      <td>1018845643270251</td>\n      <td>9.588242e+12</td>\n      <td>34.568263</td>\n      <td>31594579821</td>\n      <td>31000000000</td>\n      <td>2.915966e+08</td>\n      <td>24.165513</td>\n      <td>29.831418</td>\n      <td>3.461290e+13</td>\n      <td>19.398439</td>\n      <td>1.000000e+09</td>\n      <td>27.646020</td>\n      <td>2.000000e+12</td>\n      <td>17.229792</td>\n      <td>5.982678e+07</td>\n      <td>24.0</td>\n      <td>60</td>\n      <td>60</td>\n      <td>0.0</td>\n      <td>1.999999</td>\n      <td>17.788372</td>\n      <td>17.492884</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"df.drop(['slot_min_first'],axis =1,inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:31.640438Z","iopub.execute_input":"2025-04-29T17:50:31.640626Z","iopub.status.idle":"2025-04-29T17:50:31.730942Z","shell.execute_reply.started":"2025-04-29T17:50:31.640602Z","shell.execute_reply":"2025-04-29T17:50:31.730387Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"df.rename(columns={df.columns[0]: 'index'}, inplace=True)\ndf = df.drop(['index'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:31.731635Z","iopub.execute_input":"2025-04-29T17:50:31.731825Z","iopub.status.idle":"2025-04-29T17:50:31.865541Z","shell.execute_reply.started":"2025-04-29T17:50:31.731809Z","shell.execute_reply":"2025-04-29T17:50:31.865008Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"train_proc = (df[df['label'] == 1]).reset_index(drop = True)\ntest_proc = (df[df['label'] == 0]).reset_index(drop =True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:31.866220Z","iopub.execute_input":"2025-04-29T17:50:31.866420Z","iopub.status.idle":"2025-04-29T17:50:32.321416Z","shell.execute_reply.started":"2025-04-29T17:50:31.866404Z","shell.execute_reply":"2025-04-29T17:50:32.320601Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"train_y_proc = train['has_graduated']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:32.322255Z","iopub.execute_input":"2025-04-29T17:50:32.322431Z","iopub.status.idle":"2025-04-29T17:50:32.326233Z","shell.execute_reply.started":"2025-04-29T17:50:32.322418Z","shell.execute_reply":"2025-04-29T17:50:32.325449Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"train_proc = train_proc.drop(['slot_graduated','label','is_valid','mint','has_graduated'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:32.326912Z","iopub.execute_input":"2025-04-29T17:50:32.327141Z","iopub.status.idle":"2025-04-29T17:50:32.378837Z","shell.execute_reply.started":"2025-04-29T17:50:32.327124Z","shell.execute_reply":"2025-04-29T17:50:32.378127Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"test_proc = test_proc.drop(['is_valid','label','slot_graduated','has_graduated'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:32.379555Z","iopub.execute_input":"2025-04-29T17:50:32.379752Z","iopub.status.idle":"2025-04-29T17:50:32.422232Z","shell.execute_reply.started":"2025-04-29T17:50:32.379736Z","shell.execute_reply":"2025-04-29T17:50:32.421488Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"x_test = test_proc","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:32.423025Z","iopub.execute_input":"2025-04-29T17:50:32.423236Z","iopub.status.idle":"2025-04-29T17:50:32.426822Z","shell.execute_reply.started":"2025-04-29T17:50:32.423220Z","shell.execute_reply":"2025-04-29T17:50:32.426165Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"test_proc = test_proc.drop(['mint'],axis =1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:32.427633Z","iopub.execute_input":"2025-04-29T17:50:32.427886Z","iopub.status.idle":"2025-04-29T17:50:32.476601Z","shell.execute_reply.started":"2025-04-29T17:50:32.427865Z","shell.execute_reply":"2025-04-29T17:50:32.476009Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"import gc\ndel agg_sell,agg_buy,grouped_x,x,df,group_x,chunk,dune,info_onchain,buyed_d,selled_d,buy_d,sell_d\ngc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:32.477351Z","iopub.execute_input":"2025-04-29T17:50:32.477583Z","iopub.status.idle":"2025-04-29T17:50:33.974066Z","shell.execute_reply.started":"2025-04-29T17:50:32.477555Z","shell.execute_reply":"2025-04-29T17:50:33.973453Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"7"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold\nfrom lightgbm import LGBMClassifier\nfrom lightgbm import early_stopping\n\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nfor fold, (train_idx, val_idx) in enumerate(skf.split(train_proc,train_y_proc)):\n    X_train, X_val = train_proc.iloc[train_idx], train_proc.iloc[val_idx]\n    y_train, y_val = train_y_proc.iloc[train_idx], train_y_proc.iloc[val_idx]\n\n    \n    model = LGBMClassifier(\n        class_weight='balanced',   \n        random_state=42,\n        n_estimators=1000,\n        learning_rate=0.05\n    )\n    model.fit(\n        X_train, y_train,\n        eval_set=[(X_val, y_val)],\n        eval_metric='logloss',\n        callbacks=[early_stopping(stopping_rounds=50, verbose=True)]\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:50:33.974897Z","iopub.execute_input":"2025-04-29T17:50:33.975307Z","iopub.status.idle":"2025-04-29T17:53:40.075207Z","shell.execute_reply.started":"2025-04-29T17:50:33.975286Z","shell.execute_reply":"2025-04-29T17:53:40.074442Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 5923, number of negative: 505722\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.025056 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 8418\n[LightGBM] [Info] Number of data points in the train set: 511645, number of used features: 36\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\nTraining until validation scores don't improve for 50 rounds\nDid not meet early stopping. Best iteration is:\n[1000]\tvalid_0's binary_logloss: 0.201651\n[LightGBM] [Info] Number of positive: 5923, number of negative: 505722\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.024753 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 8417\n[LightGBM] [Info] Number of data points in the train set: 511645, number of used features: 36\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\nTraining until validation scores don't improve for 50 rounds\nDid not meet early stopping. Best iteration is:\n[1000]\tvalid_0's binary_logloss: 0.202483\n[LightGBM] [Info] Number of positive: 5924, number of negative: 505722\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.025433 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 8419\n[LightGBM] [Info] Number of data points in the train set: 511646, number of used features: 36\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\nTraining until validation scores don't improve for 50 rounds\nDid not meet early stopping. Best iteration is:\n[1000]\tvalid_0's binary_logloss: 0.2022\n[LightGBM] [Info] Number of positive: 5923, number of negative: 505723\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.024547 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 8418\n[LightGBM] [Info] Number of data points in the train set: 511646, number of used features: 36\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\nTraining until validation scores don't improve for 50 rounds\nDid not meet early stopping. Best iteration is:\n[1000]\tvalid_0's binary_logloss: 0.201435\n[LightGBM] [Info] Number of positive: 5923, number of negative: 505723\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.025267 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 8418\n[LightGBM] [Info] Number of data points in the train set: 511646, number of used features: 36\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\nTraining until validation scores don't improve for 50 rounds\nDid not meet early stopping. Best iteration is:\n[1000]\tvalid_0's binary_logloss: 0.203572\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"from catboost import CatBoostClassifier\n\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nfor fold, (train_idx, val_idx) in enumerate(skf.split(train_proc,train_y_proc)):\n    X_train, X_val = train_proc.iloc[train_idx], train_proc.iloc[val_idx]\n    y_train, y_val = train_y_proc.iloc[train_idx], train_y_proc.iloc[val_idx]\n\n    cat_model = CatBoostClassifier(\n    iterations=1200,       # Number of trees\n    learning_rate=0.01,    # Step size\n    depth=6,               # Tree depth\n    loss_function='Logloss',  # For binary classification\n    eval_metric='Logloss',        # Metric to monitor\n    random_seed=42,\n    verbose=100,              \n    task_type='GPU'           \n)\n    cat_model.fit(\n    X_train, y_train,\n    eval_set=(X_val, y_val),\n    early_stopping_rounds=50,\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:53:40.076080Z","iopub.execute_input":"2025-04-29T17:53:40.076801Z","iopub.status.idle":"2025-04-29T17:54:37.815212Z","shell.execute_reply.started":"2025-04-29T17:53:40.076779Z","shell.execute_reply":"2025-04-29T17:54:37.814381Z"}},"outputs":[{"name":"stdout","text":"0:\tlearn: 0.6685806\ttest: 0.6685908\tbest: 0.6685908 (0)\ttotal: 186ms\tremaining: 3m 43s\n100:\tlearn: 0.0618856\ttest: 0.0615851\tbest: 0.0615851 (100)\ttotal: 1.16s\tremaining: 12.6s\n200:\tlearn: 0.0427391\ttest: 0.0422362\tbest: 0.0422362 (200)\ttotal: 1.95s\tremaining: 9.67s\n300:\tlearn: 0.0406123\ttest: 0.0401370\tbest: 0.0401370 (300)\ttotal: 2.76s\tremaining: 8.25s\n400:\tlearn: 0.0400641\ttest: 0.0396504\tbest: 0.0396504 (400)\ttotal: 3.58s\tremaining: 7.13s\n500:\tlearn: 0.0397743\ttest: 0.0394396\tbest: 0.0394396 (500)\ttotal: 4.4s\tremaining: 6.14s\n600:\tlearn: 0.0395710\ttest: 0.0393257\tbest: 0.0393257 (600)\ttotal: 5.2s\tremaining: 5.19s\n700:\tlearn: 0.0393982\ttest: 0.0392374\tbest: 0.0392374 (700)\ttotal: 5.99s\tremaining: 4.27s\n800:\tlearn: 0.0392485\ttest: 0.0391695\tbest: 0.0391695 (800)\ttotal: 6.78s\tremaining: 3.38s\n900:\tlearn: 0.0391159\ttest: 0.0391163\tbest: 0.0391163 (900)\ttotal: 7.57s\tremaining: 2.51s\n1000:\tlearn: 0.0389981\ttest: 0.0390723\tbest: 0.0390723 (1000)\ttotal: 8.35s\tremaining: 1.66s\n1100:\tlearn: 0.0388833\ttest: 0.0390365\tbest: 0.0390365 (1100)\ttotal: 9.15s\tremaining: 822ms\n1199:\tlearn: 0.0387745\ttest: 0.0390053\tbest: 0.0390053 (1199)\ttotal: 9.98s\tremaining: 0us\nbestTest = 0.03900533943\nbestIteration = 1199\n0:\tlearn: 0.6684999\ttest: 0.6684954\tbest: 0.6684954 (0)\ttotal: 10.8ms\tremaining: 12.9s\n100:\tlearn: 0.0612377\ttest: 0.0620958\tbest: 0.0620958 (100)\ttotal: 879ms\tremaining: 9.56s\n200:\tlearn: 0.0422365\ttest: 0.0435056\tbest: 0.0435056 (200)\ttotal: 1.73s\tremaining: 8.61s\n300:\tlearn: 0.0402203\ttest: 0.0416887\tbest: 0.0416887 (300)\ttotal: 2.6s\tremaining: 7.77s\n400:\tlearn: 0.0396949\ttest: 0.0412625\tbest: 0.0412625 (400)\ttotal: 3.43s\tremaining: 6.83s\n500:\tlearn: 0.0394104\ttest: 0.0410674\tbest: 0.0410674 (500)\ttotal: 4.22s\tremaining: 5.89s\n600:\tlearn: 0.0391976\ttest: 0.0409316\tbest: 0.0409316 (600)\ttotal: 5.01s\tremaining: 4.99s\n700:\tlearn: 0.0390322\ttest: 0.0408440\tbest: 0.0408440 (700)\ttotal: 5.79s\tremaining: 4.12s\n800:\tlearn: 0.0388843\ttest: 0.0407772\tbest: 0.0407772 (800)\ttotal: 6.65s\tremaining: 3.31s\n900:\tlearn: 0.0387598\ttest: 0.0407223\tbest: 0.0407223 (900)\ttotal: 7.54s\tremaining: 2.5s\n1000:\tlearn: 0.0386277\ttest: 0.0406661\tbest: 0.0406661 (1000)\ttotal: 8.47s\tremaining: 1.68s\n1100:\tlearn: 0.0385100\ttest: 0.0406190\tbest: 0.0406190 (1100)\ttotal: 9.26s\tremaining: 833ms\n1199:\tlearn: 0.0383889\ttest: 0.0405755\tbest: 0.0405755 (1199)\ttotal: 10.1s\tremaining: 0us\nbestTest = 0.04057545727\nbestIteration = 1199\n0:\tlearn: 0.6685998\ttest: 0.6686147\tbest: 0.6686147 (0)\ttotal: 10.5ms\tremaining: 12.6s\n100:\tlearn: 0.0617354\ttest: 0.0619051\tbest: 0.0619051 (100)\ttotal: 889ms\tremaining: 9.68s\n200:\tlearn: 0.0425034\ttest: 0.0427518\tbest: 0.0427518 (200)\ttotal: 1.77s\tremaining: 8.81s\n300:\tlearn: 0.0404151\ttest: 0.0408021\tbest: 0.0408021 (300)\ttotal: 2.64s\tremaining: 7.89s\n400:\tlearn: 0.0398675\ttest: 0.0403873\tbest: 0.0403873 (400)\ttotal: 3.5s\tremaining: 6.98s\n500:\tlearn: 0.0395797\ttest: 0.0402164\tbest: 0.0402164 (500)\ttotal: 4.36s\tremaining: 6.08s\n600:\tlearn: 0.0393781\ttest: 0.0401141\tbest: 0.0401141 (600)\ttotal: 5.14s\tremaining: 5.12s\n700:\tlearn: 0.0392059\ttest: 0.0400391\tbest: 0.0400391 (700)\ttotal: 5.94s\tremaining: 4.23s\n800:\tlearn: 0.0390599\ttest: 0.0399794\tbest: 0.0399794 (800)\ttotal: 6.78s\tremaining: 3.38s\n900:\tlearn: 0.0389218\ttest: 0.0399192\tbest: 0.0399192 (900)\ttotal: 7.59s\tremaining: 2.52s\n1000:\tlearn: 0.0388004\ttest: 0.0398804\tbest: 0.0398804 (1000)\ttotal: 8.41s\tremaining: 1.67s\n1100:\tlearn: 0.0386757\ttest: 0.0398374\tbest: 0.0398374 (1100)\ttotal: 9.26s\tremaining: 833ms\n1199:\tlearn: 0.0385598\ttest: 0.0398047\tbest: 0.0398047 (1199)\ttotal: 10.1s\tremaining: 0us\nbestTest = 0.0398046962\nbestIteration = 1199\n0:\tlearn: 0.6683524\ttest: 0.6683307\tbest: 0.6683307 (0)\ttotal: 24.5ms\tremaining: 29.3s\n100:\tlearn: 0.0616653\ttest: 0.0609880\tbest: 0.0609880 (100)\ttotal: 816ms\tremaining: 8.88s\n200:\tlearn: 0.0427368\ttest: 0.0420286\tbest: 0.0420286 (200)\ttotal: 1.6s\tremaining: 7.94s\n300:\tlearn: 0.0406232\ttest: 0.0399598\tbest: 0.0399598 (300)\ttotal: 2.37s\tremaining: 7.08s\n400:\tlearn: 0.0400870\ttest: 0.0395112\tbest: 0.0395112 (400)\ttotal: 3.14s\tremaining: 6.26s\n500:\tlearn: 0.0398108\ttest: 0.0393253\tbest: 0.0393253 (500)\ttotal: 3.91s\tremaining: 5.46s\n600:\tlearn: 0.0396173\ttest: 0.0392253\tbest: 0.0392253 (600)\ttotal: 4.68s\tremaining: 4.66s\n700:\tlearn: 0.0394420\ttest: 0.0391457\tbest: 0.0391457 (700)\ttotal: 5.52s\tremaining: 3.93s\n800:\tlearn: 0.0392883\ttest: 0.0390903\tbest: 0.0390903 (800)\ttotal: 6.3s\tremaining: 3.14s\n900:\tlearn: 0.0391552\ttest: 0.0390488\tbest: 0.0390488 (900)\ttotal: 7.08s\tremaining: 2.35s\n1000:\tlearn: 0.0390299\ttest: 0.0390112\tbest: 0.0390112 (1000)\ttotal: 7.86s\tremaining: 1.56s\n1100:\tlearn: 0.0389071\ttest: 0.0389795\tbest: 0.0389793 (1098)\ttotal: 8.64s\tremaining: 777ms\n1199:\tlearn: 0.0387984\ttest: 0.0389492\tbest: 0.0389492 (1199)\ttotal: 9.42s\tremaining: 0us\nbestTest = 0.03894923155\nbestIteration = 1199\n0:\tlearn: 0.6685506\ttest: 0.6685589\tbest: 0.6685589 (0)\ttotal: 11.6ms\tremaining: 13.9s\n100:\tlearn: 0.0616029\ttest: 0.0620094\tbest: 0.0620094 (100)\ttotal: 895ms\tremaining: 9.74s\n200:\tlearn: 0.0424084\ttest: 0.0429822\tbest: 0.0429822 (200)\ttotal: 1.78s\tremaining: 8.85s\n300:\tlearn: 0.0403427\ttest: 0.0410349\tbest: 0.0410349 (300)\ttotal: 2.66s\tremaining: 7.96s\n400:\tlearn: 0.0398031\ttest: 0.0405829\tbest: 0.0405829 (400)\ttotal: 3.49s\tremaining: 6.96s\n500:\tlearn: 0.0395287\ttest: 0.0403939\tbest: 0.0403939 (500)\ttotal: 4.36s\tremaining: 6.08s\n600:\tlearn: 0.0393364\ttest: 0.0402790\tbest: 0.0402790 (600)\ttotal: 5.3s\tremaining: 5.28s\n700:\tlearn: 0.0391798\ttest: 0.0402005\tbest: 0.0402005 (700)\ttotal: 6.11s\tremaining: 4.35s\n800:\tlearn: 0.0390334\ttest: 0.0401376\tbest: 0.0401376 (800)\ttotal: 6.93s\tremaining: 3.45s\n900:\tlearn: 0.0389006\ttest: 0.0400807\tbest: 0.0400807 (900)\ttotal: 7.77s\tremaining: 2.58s\n1000:\tlearn: 0.0387712\ttest: 0.0400273\tbest: 0.0400273 (1000)\ttotal: 8.63s\tremaining: 1.72s\n1100:\tlearn: 0.0386516\ttest: 0.0399860\tbest: 0.0399860 (1100)\ttotal: 9.48s\tremaining: 852ms\n1199:\tlearn: 0.0385387\ttest: 0.0399454\tbest: 0.0399454 (1199)\ttotal: 10.3s\tremaining: 0us\nbestTest = 0.03994541523\nbestIteration = 1199\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"from xgboost import XGBClassifier\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nfor fold, (train_idx, val_idx) in enumerate(skf.split(train_proc,train_y_proc)):\n    X_train, X_val = train_proc.iloc[train_idx], train_proc.iloc[val_idx]\n    y_train, y_val = train_y_proc.iloc[train_idx], train_y_proc.iloc[val_idx]\n    xgb_model = XGBClassifier(\n    n_estimators=1000,\n    learning_rate=0.05,\n    max_depth=6,\n    objective='binary:logistic',   # Stays the same\n    eval_metric='logloss',         # <- Change from auc to logloss\n    use_label_encoder=False,\n    random_state=42,\n    tree_method='gpu_hist'         # (Optional: if using GPU)\n)\n    xgb_model.fit(\n    X_train, y_train,\n    eval_set=[(X_val, y_val)],\n    early_stopping_rounds=50,\n    verbose=100\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:54:37.816071Z","iopub.execute_input":"2025-04-29T17:54:37.816322Z","iopub.status.idle":"2025-04-29T17:54:58.526474Z","shell.execute_reply.started":"2025-04-29T17:54:37.816300Z","shell.execute_reply":"2025-04-29T17:54:58.525933Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:54:39] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-logloss:0.14782\n[100]\tvalidation_0-logloss:0.03905\n[200]\tvalidation_0-logloss:0.03863\n[300]\tvalidation_0-logloss:0.03863\n[303]\tvalidation_0-logloss:0.03863\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-logloss:0.14796\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:54:44] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"[100]\tvalidation_0-logloss:0.04042\n[200]\tvalidation_0-logloss:0.04002\n[263]\tvalidation_0-logloss:0.04005\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-logloss:0.14786\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:54:48] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"[100]\tvalidation_0-logloss:0.03978\n[200]\tvalidation_0-logloss:0.03946\n[258]\tvalidation_0-logloss:0.03946\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-logloss:0.14780\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:54:52] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"[100]\tvalidation_0-logloss:0.03900\n[200]\tvalidation_0-logloss:0.03871\n[243]\tvalidation_0-logloss:0.03871\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-logloss:0.14790\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:54:56] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"[100]\tvalidation_0-logloss:0.03987\n[200]\tvalidation_0-logloss:0.03959\n[276]\tvalidation_0-logloss:0.03963\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"target = model.predict_proba(train_proc)[:, 1]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:54:58.526991Z","iopub.execute_input":"2025-04-29T17:54:58.527171Z","iopub.status.idle":"2025-04-29T17:55:24.291227Z","shell.execute_reply.started":"2025-04-29T17:54:58.527155Z","shell.execute_reply":"2025-04-29T17:55:24.290614Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"xgb_pred = xgb_model.predict_proba(train_proc)[:, 1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:24.291944Z","iopub.execute_input":"2025-04-29T17:55:24.292223Z","iopub.status.idle":"2025-04-29T17:55:24.732889Z","shell.execute_reply.started":"2025-04-29T17:55:24.292196Z","shell.execute_reply":"2025-04-29T17:55:24.732256Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:55:24] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n  warnings.warn(smsg, UserWarning)\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [17:55:24] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\nPotential solutions:\n- Use a data structure that matches the device ordinal in the booster.\n- Set the device for booster before call to inplace_predict.\n\nThis warning will only be shown once.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"cat_pred = cat_model.predict_proba(train_proc)[:,1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:24.733661Z","iopub.execute_input":"2025-04-29T17:55:24.733934Z","iopub.status.idle":"2025-04-29T17:55:25.187648Z","shell.execute_reply.started":"2025-04-29T17:55:24.733912Z","shell.execute_reply":"2025-04-29T17:55:25.187040Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"test_mint = x_test['mint']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:25.188473Z","iopub.execute_input":"2025-04-29T17:55:25.188950Z","iopub.status.idle":"2025-04-29T17:55:25.192630Z","shell.execute_reply.started":"2025-04-29T17:55:25.188924Z","shell.execute_reply":"2025-04-29T17:55:25.191913Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"lgb_test = model.predict_proba(test_proc)[:, 1]\nxgb_test = xgb_model.predict_proba(test_proc)[:, 1]\ncat_test = cat_model.predict_proba(test_proc)[:,1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:25.193321Z","iopub.execute_input":"2025-04-29T17:55:25.193502Z","iopub.status.idle":"2025-04-29T17:55:45.647800Z","shell.execute_reply.started":"2025-04-29T17:55:25.193487Z","shell.execute_reply":"2025-04-29T17:55:45.647152Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"combined = pd.DataFrame(\n    {\n        'lgm' : target,\n        'cat' : cat_pred,\n        'xg'  : xgb_pred\n    }\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:45.648611Z","iopub.execute_input":"2025-04-29T17:55:45.648890Z","iopub.status.idle":"2025-04-29T17:55:45.655069Z","shell.execute_reply.started":"2025-04-29T17:55:45.648866Z","shell.execute_reply":"2025-04-29T17:55:45.654441Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"totaltest = pd.DataFrame(\n    {\n        'lgm' : lgb_test,\n        'cat' : cat_test,\n        'xg'  : xgb_test\n    }\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:45.655830Z","iopub.execute_input":"2025-04-29T17:55:45.656121Z","iopub.status.idle":"2025-04-29T17:55:45.669744Z","shell.execute_reply.started":"2025-04-29T17:55:45.656094Z","shell.execute_reply":"2025-04-29T17:55:45.668941Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"#from sklearn.linear_model import LogisticRegression\n\n#meta_model = LogisticRegression(random_state=42, max_iter=1000)\n\n\n#meta_model.fit(combined,train_y_proc)\n\n#final_preds = meta_model.predict_proba(totaltest)[:, 1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:45.670444Z","iopub.execute_input":"2025-04-29T17:55:45.670695Z","iopub.status.idle":"2025-04-29T17:55:45.679780Z","shell.execute_reply.started":"2025-04-29T17:55:45.670677Z","shell.execute_reply":"2025-04-29T17:55:45.679260Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nimport numpy as np\n\n# Number of folds\nn_folds = 5\nskf = StratifiedKFold(n_splits=n_folds, shuffle=True, random_state=42)\n\n# To collect validation predictions\nval_preds = np.zeros(len(combined))\n# To collect test predictions from each fold\ntest_preds = np.zeros((len(totaltest), n_folds))\n\nfor fold, (train_idx, val_idx) in enumerate(skf.split(combined, train_y_proc)):\n    X_train, X_val = combined.iloc[train_idx], combined.iloc[val_idx]\n    y_train, y_val = train_y_proc.iloc[train_idx], train_y_proc.iloc[val_idx]\n\n    # Define meta model\n    meta_model = LogisticRegression(random_state=42, max_iter=1000)\n\n    # Train on training part\n    meta_model.fit(X_train, y_train)\n\n    # Predict on validation set\n    val_preds[val_idx] = meta_model.predict_proba(X_val)[:, 1]\n\n    # Predict on test set\n    test_preds[:, fold] = meta_model.predict_proba(totaltest)[:, 1]\n\n# Average test predictions across folds\nfinal_preds = test_preds.mean(axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T17:55:45.680530Z","iopub.execute_input":"2025-04-29T17:55:45.680786Z","iopub.status.idle":"2025-04-29T17:55:50.622542Z","shell.execute_reply.started":"2025-04-29T17:55:45.680763Z","shell.execute_reply":"2025-04-29T17:55:50.621834Z"}},"outputs":[],"execution_count":49},{"cell_type":"code","source":"final  = meta_model.predict_proba(combined)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:14:29.993545Z","iopub.execute_input":"2025-04-29T18:14:29.993824Z","iopub.status.idle":"2025-04-29T18:14:30.015905Z","shell.execute_reply.started":"2025-04-29T18:14:29.993800Z","shell.execute_reply":"2025-04-29T18:14:30.015308Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import log_loss\n\n# Assuming 'logistic_preds' are the probability outputs (from meta-model)\n# and 'train_y_proc' is your true target labels for training\n\n\n\n# Initialize and train the Decision Tree\ntree_model = DecisionTreeClassifier(\n    max_depth=30,         # Try tuning this\n    min_samples_leaf=10, # Prevent overfitting\n    random_state=42\n)\ntree_model.fit(final, train_y_proc)\n\n\n# Optional: Evaluate on train set\ntrain_loss = log_loss(train_y_proc, tree_model.predict_proba(final)[:, 1])\nprint(f\"Train Log Loss (Decision Tree on top of logistic): {train_loss}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:29:33.146333Z","iopub.execute_input":"2025-04-29T18:29:33.146601Z","iopub.status.idle":"2025-04-29T18:29:34.885013Z","shell.execute_reply.started":"2025-04-29T18:29:33.146580Z","shell.execute_reply":"2025-04-29T18:29:34.884228Z"}},"outputs":[{"name":"stdout","text":"Train Log Loss (Decision Tree on top of logistic): 0.02144759390839339\n","output_type":"stream"}],"execution_count":78},{"cell_type":"code","source":"los_pred = meta_model.predict_proba(totaltest)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:44:48.337501Z","iopub.execute_input":"2025-04-29T18:44:48.338131Z","iopub.status.idle":"2025-04-29T18:44:48.355146Z","shell.execute_reply.started":"2025-04-29T18:44:48.338106Z","shell.execute_reply":"2025-04-29T18:44:48.354590Z"}},"outputs":[],"execution_count":84},{"cell_type":"code","source":"target = tree_model.predict_proba(los_pred)[:,1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:44:48.873479Z","iopub.execute_input":"2025-04-29T18:44:48.873713Z","iopub.status.idle":"2025-04-29T18:44:48.901043Z","shell.execute_reply.started":"2025-04-29T18:44:48.873695Z","shell.execute_reply":"2025-04-29T18:44:48.900460Z"}},"outputs":[],"execution_count":85},{"cell_type":"code","source":"submission_df = pd.DataFrame({\n    'mint': test_mint,\n    'has_graduated': target\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:44:49.379461Z","iopub.execute_input":"2025-04-29T18:44:49.380009Z","iopub.status.idle":"2025-04-29T18:44:49.389327Z","shell.execute_reply.started":"2025-04-29T18:44:49.379957Z","shell.execute_reply":"2025-04-29T18:44:49.388718Z"}},"outputs":[],"execution_count":86},{"cell_type":"code","source":"submission_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:44:49.811594Z","iopub.execute_input":"2025-04-29T18:44:49.811793Z","iopub.status.idle":"2025-04-29T18:44:49.819071Z","shell.execute_reply.started":"2025-04-29T18:44:49.811778Z","shell.execute_reply":"2025-04-29T18:44:49.818339Z"}},"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"                                           mint  has_graduated\n0  9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump       0.000695\n1  9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f       0.000695\n2  HL2di8dcQ7eYDmkcFoZ4zJyHX5SbRZXAJxTegL3JPfx2       0.000695\n3  7iAFj9Pc5QH9jbGmHwYe8T6yzNVbjhL13PNJXVTspump       0.000695\n4  F7U1Rdgz2KFpneKpAnYytWF2jggnsrLScfi2A668pump       0.000695","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mint</th>\n      <th>has_graduated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9Wt3N7etKMX9cioTdEJ5S4b8A9nK3M66n9RFVgBGpump</td>\n      <td>0.000695</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9q5y2X2P8ZEKTjyXBVcS5q2EZM7HbNV8DURY2qnvqi2f</td>\n      <td>0.000695</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>HL2di8dcQ7eYDmkcFoZ4zJyHX5SbRZXAJxTegL3JPfx2</td>\n      <td>0.000695</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7iAFj9Pc5QH9jbGmHwYe8T6yzNVbjhL13PNJXVTspump</td>\n      <td>0.000695</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>F7U1Rdgz2KFpneKpAnYytWF2jggnsrLScfi2A668pump</td>\n      <td>0.000695</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":87},{"cell_type":"code","source":"submission_df.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:44:50.197262Z","iopub.execute_input":"2025-04-29T18:44:50.197455Z","iopub.status.idle":"2025-04-29T18:44:51.692307Z","shell.execute_reply.started":"2025-04-29T18:44:50.197439Z","shell.execute_reply":"2025-04-29T18:44:51.691505Z"}},"outputs":[],"execution_count":88},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}